//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace login2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Core.Objects.DataClasses;
    using System.Linq;
    
    public partial class MitBankDBEntities2 : DbContext
    {
        public MitBankDBEntities2()
            : base("name=MitBankDBEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ComisionStatu> ComisionStatus { get; set; }
        public DbSet<CurrentCurrency> CurrentCurrencies { get; set; }
        public DbSet<TypeBankingPacket> TypeBankingPackets { get; set; }
        public DbSet<UserAccount> UserAccounts { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<IndividualCustomer> IndividualCustomers { get; set; }
        public DbSet<Individual> Individuals { get; set; }
        public DbSet<NormalUser> NormalUsers { get; set; }
        public DbSet<Username> Usernames { get; set; }
    
        public virtual ObjectResult<AddNormalUser_Result> AddNormalUser(Nullable<int> iDcustomer, string username, string password)
        {
            var iDcustomerParameter = iDcustomer.HasValue ?
                new ObjectParameter("IDcustomer", iDcustomer) :
                new ObjectParameter("IDcustomer", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddNormalUser_Result>("AddNormalUser", iDcustomerParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int getIdCustomer(Nullable<int> userID, ObjectParameter idClient)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getIdCustomer", userIDParameter, idClient);
        }
    
        public virtual ObjectResult<Nullable<int>> getUandPProcedure(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getUandPProcedure", usernameParameter, passwordParameter);
        }
    
        public virtual int IsAdmin(Nullable<int> userID, ObjectParameter result)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsAdmin", userIDParameter, result);
        }
    
        public virtual int putMoneyOnAccount(string iBAN, Nullable<int> idAdmin, Nullable<double> valueMoney)
        {
            var iBANParameter = iBAN != null ?
                new ObjectParameter("IBAN", iBAN) :
                new ObjectParameter("IBAN", typeof(string));
    
            var idAdminParameter = idAdmin.HasValue ?
                new ObjectParameter("idAdmin", idAdmin) :
                new ObjectParameter("idAdmin", typeof(int));
    
            var valueMoneyParameter = valueMoney.HasValue ?
                new ObjectParameter("valueMoney", valueMoney) :
                new ObjectParameter("valueMoney", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("putMoneyOnAccount", iBANParameter, idAdminParameter, valueMoneyParameter);
        }
    
        public virtual ObjectResult<selectOnIndividuals_Result> selectOnIndividuals(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectOnIndividuals_Result>("selectOnIndividuals", idParameter);
        }
    
        public virtual ObjectResult<string> showAllMyAccounts(Nullable<int> idUsername)
        {
            var idUsernameParameter = idUsername.HasValue ?
                new ObjectParameter("idUsername", idUsername) :
                new ObjectParameter("idUsername", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("showAllMyAccounts", idUsernameParameter);
        }
    
        public virtual ObjectResult<showIBANInformations_Result> showIBANInformations(string iban)
        {
            var ibanParameter = iban != null ?
                new ObjectParameter("iban", iban) :
                new ObjectParameter("iban", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showIBANInformations_Result>("showIBANInformations", ibanParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> takeComision(Nullable<int> tiptranzaction, string accountNR)
        {
            var tiptranzactionParameter = tiptranzaction.HasValue ?
                new ObjectParameter("tiptranzaction", tiptranzaction) :
                new ObjectParameter("tiptranzaction", typeof(int));
    
            var accountNRParameter = accountNR != null ?
                new ObjectParameter("accountNR", accountNR) :
                new ObjectParameter("accountNR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("takeComision", tiptranzactionParameter, accountNRParameter);
        }
    
        public virtual ObjectResult<string> getAnyoneCurrency(string ibanNR)
        {
            var ibanNRParameter = ibanNR != null ?
                new ObjectParameter("ibanNR", ibanNR) :
                new ObjectParameter("ibanNR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getAnyoneCurrency", ibanNRParameter);
        }
    
        public virtual int transferMoney(string fromIBAN, string toIBAN, Nullable<double> valueToTransfer, Nullable<double> valueToRecieve)
        {
            var fromIBANParameter = fromIBAN != null ?
                new ObjectParameter("fromIBAN", fromIBAN) :
                new ObjectParameter("fromIBAN", typeof(string));
    
            var toIBANParameter = toIBAN != null ?
                new ObjectParameter("toIBAN", toIBAN) :
                new ObjectParameter("toIBAN", typeof(string));
    
            var valueToTransferParameter = valueToTransfer.HasValue ?
                new ObjectParameter("valueToTransfer", valueToTransfer) :
                new ObjectParameter("valueToTransfer", typeof(double));
    
            var valueToRecieveParameter = valueToRecieve.HasValue ?
                new ObjectParameter("valueToRecieve", valueToRecieve) :
                new ObjectParameter("valueToRecieve", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("transferMoney", fromIBANParameter, toIBANParameter, valueToTransferParameter, valueToRecieveParameter);
        }
    
        public virtual int addHistoryTransaction(Nullable<int> userId, string userAccountIban, string toWichAccount, Nullable<int> typeTransaction, Nullable<double> value, string date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var userAccountIbanParameter = userAccountIban != null ?
                new ObjectParameter("UserAccountIban", userAccountIban) :
                new ObjectParameter("UserAccountIban", typeof(string));
    
            var toWichAccountParameter = toWichAccount != null ?
                new ObjectParameter("toWichAccount", toWichAccount) :
                new ObjectParameter("toWichAccount", typeof(string));
    
            var typeTransactionParameter = typeTransaction.HasValue ?
                new ObjectParameter("typeTransaction", typeTransaction) :
                new ObjectParameter("typeTransaction", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(double));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addHistoryTransaction", userIdParameter, userAccountIbanParameter, toWichAccountParameter, typeTransactionParameter, valueParameter, dateParameter);
        }
    
        public virtual int insertLastLogin(Nullable<int> idusername, string date)
        {
            var idusernameParameter = idusername.HasValue ?
                new ObjectParameter("idusername", idusername) :
                new ObjectParameter("idusername", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertLastLogin", idusernameParameter, dateParameter);
        }
    
        public virtual ObjectResult<string> getLastLogin(Nullable<int> idusername)
        {
            var idusernameParameter = idusername.HasValue ?
                new ObjectParameter("idusername", idusername) :
                new ObjectParameter("idusername", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getLastLogin", idusernameParameter);
        }
    }
}
