/*
FOCUS:
	-> Elaborarea aplicatiei de partea user-ului normal

TO DO:
	-> elaborat mecanism de introducere a tranzactiilor (triggere sau proceduri stocate)

TO DO in a far away future
	-> implementarea permisiunilor Adminului
*/


USE master

IF db_id('MitBankDB') is not null
	BEGIN
		PRINT 'MitBankDB exista - va fi stearsa!'
		DROP DATABASE MitBankDB
	END
ELSE
	BEGIN
		PRINT 'MitBankDB nu exista'
	END

CREATE DATABASE MitBankDB
GO

ALTER AUTHORIZATION ON DATABASE::MitBankDB TO sa;

USE MitBankDB
GO


-- +++++++++++++++++++++++++++ CREATING TABLES ++++++++++++++++++++++++++++++++++++++++++++++++++++
-- Login related tables
CREATE TABLE CustomerTypes(
	ID					int
	,CustomerTypeName	nvarchar(50)
	,CONSTRAINT PK_CustomerTypes
		PRIMARY KEY (ID)
);
GO

CREATE TABLE Customers(
	ID					int			IDENTITY (1,1)	NOT NULL
	,CustomerType		int							NOT NULL
	,CONSTRAINT PK_Customers
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_Customers_CustomerType
		FOREIGN KEY (CustomerType) REFERENCES CustomerTypes(ID)
);
GO

CREATE TABLE Individuals(
	ID			int				IDENTITY (1,1)	NOT NULL
	,FirstName	nvarchar(100)					NOT NULL
	,LastName	nvarchar(100)					NOT NULL
	,Email		nvarchar(200)					NOT NULL
	,CNP		nvarchar(13)					NOT NULL
	,Birthday	date							NOT NULL
	,CONSTRAINT PK_Individuals
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT CHK_CNP
		CHECK (ISNUMERIC(CNP) = 1 AND LEN(CNP) = 13)
	-- additional checking for CNP - birthday
	,CONSTRAINT UC_Individuals
		UNIQUE (CNP)
);
GO

CREATE TABLE Companies(
	ID					int				IDENTITY(1,1)	NOT NULL
	,CustomerID			int								NOT NULL
	,IndividualID		int								NOT NULL
	,CIF				int								NOT NULL
	,Name				nvarchar(100)					NOT NULL
	,Address			nvarchar(500)					NOT NULL
	,CONSTRAINT PK_Companies
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_Companies_Customers
		FOREIGN KEY (CustomerID) REFERENCES Customers(ID)
	,CONSTRAINT FK_Companies_Individuals
		FOREIGN KEY (IndividualID) REFERENCES Individuals(ID)
)
GO

CREATE TABLE IndividualCustomers(
	IndividualID		int								NOT NULL
	,CustomerID			int								NOT NULL
	,CONSTRAINT PK_IndividualCustomers
		PRIMARY KEY CLUSTERED (IndividualID, CustomerID)
	,CONSTRAINT FK_IndividualCustomers_Individuals
		FOREIGN KEY (IndividualID) REFERENCES Individuals(ID)
	,CONSTRAINT FK_IndividualCustomers_Customers
		FOREIGN KEY (IndividualID) REFERENCES Customers(ID)
);
GO

CREATE TABLE Employees(
	ID				int			IDENTITY(1,1)	NOT NULL
	,IndividualID	int							NOT NULL
	,CONSTRAINT PK_Employees
		PRIMARY KEY CLUSTERED (ID) 
	,CONSTRAINT FK_Employees_Individuals
		FOREIGN KEY (IndividualID) REFERENCES Individuals(ID)
)


CREATE TABLE UserTypes(
	ID			int							NOT NULL
	,UserType	nvarchar(20)
	,CONSTRAINT PK_UserTypes
		PRIMARY KEY CLUSTERED (ID)
)
GO

CREATE TABLE Usernames(
	ID			int					IDENTITY(1,1)	NOT NULL
	,UserType	int									NOT NULL
	,Username	nvarchar(101)						NOT NULL
	,Pass		nvarchar(200)						NOT NULL
	,CONSTRAINT PK_Usernames
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_Usernames_UserTypes
		FOREIGN KEY	(UserType) REFERENCES UserTypes(ID)	
	,CONSTRAINT UC_Username
		UNIQUE	(Username)
);
GO

CREATE TABLE NormalUsers(
	ID		int
	,CustomerID  int
	,CONSTRAINT PK_NormalUsers
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_NormalUsers_Usernames
		FOREIGN KEY (ID) REFERENCES Usernames(ID)
	,CONSTRAINT FK_NormalUsers_Customers
		FOREIGN KEY (CustomerID) REFERENCES Customers(ID)
)
GO

CREATE TABLE BankAdmins(
	ID		int
	,EmployeeID  int
	,CONSTRAINT PK_BankAdmins
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_BankAdmins_Usernames
		FOREIGN KEY (ID) REFERENCES Usernames(ID)
	,CONSTRAINT FK_BankAdmins_Employees
		FOREIGN KEY (EmployeeID) REFERENCES Employees(ID)
)
GO

-- Banking related tables
CREATE TABLE AccountTypes(
	ID				int IDENTITY(1,1)
	,TypeOfAccount	nchar(20)
	,CONSTRAINT PK_AccountType
		PRIMARY KEY CLUSTERED (ID)
)
GO

CREATE TABLE TypeBankingPackets(
	ID int IDENTITY(1,1) PRIMARY KEY,
	NameTypePacket nchar(100)

)
GO

CREATE TABLE BankingPackets(
	ID				int IDENTITY(1,1)
	,IDTypePacket	int
	,AccountType	int
	,CONSTRAINT PK_BankingPackets
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_BankingPackets_AccountType
		FOREIGN KEY (AccountType) REFERENCES AccountTypes(ID),
		CONSTRAINT FK_BankPackets_Nm FOREIGN KEY (IDTypePacket)
		 REFERENCES TypeBankingPackets(ID)
)
GO
CREATE TABLE TypesTransaction(
	ID					int IDENTITY(1,1)
	,TypeTransaction	nvarchar(50)
	,CONSTRAINT PK_TypeTransactions
		PRIMARY KEY CLUSTERED (ID)
)
GO
CREATE TABLE ComisionStatus(
	ID						int IDENTITY(1,1)
	,IDTypeTransaction		int
	,IDBankPacket				int
	,Comision				float
	,CONSTRAINT PK_ComisionStatus
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_ComisionStatus_BankingPackets
		FOREIGN KEY (IDBankPacket) REFERENCES BankingPackets(ID)
	,CONSTRAINT FK_TypeTransaction_fromComisionToTrans
		FOREIGN KEY (IDTypeTransaction) REFERENCES TypesTransaction(ID)
)	
GO

drop table CurrentCurrency
CREATE TABLE CurrentCurrency(
	ID int NOT NULL IDENTITY(1,1)
	,CurrencyName nvarchar(10) NOT NULL
	,ValueBuy	float			NOT NULL
	,ValueSel	float			NOT NULL

	CONSTRAINT Pk_CurrentCurrency PRIMARY KEY CLUSTERED (CurrencyName)
)
GO

CREATE TABLE UserAccounts(
	ID					int		IDENTITY(1,1)			NOT NULL
	,BankPacket			int
	,AccountNumber		nchar(30)			NOT NULL
	,ValabilityUntil	date				NOT NULL
	,Currency			nvarchar(10)			NOT NULL
	,Sold				float				NOT NULL				
	,AccountCustomerID	int
	,CONSTRAINT PK_UserAccounts
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_UserAccounts_BankingPackets
		FOREIGN KEY (BankPacket) REFERENCES BankingPackets(ID)
	,CONSTRAINT FK_UserAccounts_Customers
		FOREIGN KEY (AccountCustomerID) REFERENCES Customers(ID)			
)
GO

CREATE TABLE HistoryTransaction(
	ID					int IDENTITY(1,1)
	,CustomerID			int
	,UserAccountID		int
	,TypeTransaction	int
	,DateTransaction	datetime
	,CONSTRAINT PK_HistoryTransaction
		PRIMARY KEY CLUSTERED (ID)
	,CONSTRAINT FK_HistoryTransaction_TypeTransactions
		FOREIGN KEY (TypeTransaction) REFERENCES TypesTransaction(ID)
	,CONSTRAINT FK_HistoryTransaction_Customers
		FOREIGN KEY (CustomerID) REFERENCES Customers(ID)
	,CONSTRAINT FK_HistoryTransaction_UserAccounts
		FOREIGN KEY (UserAccountID)	REFERENCES UserAccounts(ID)
)	
GO

-- +++++++++++++++++++++++++++++++++++++++ CREATING VIEWS ++++++++++++++++++++++++++++++++++++++++

CREATE VIEW UsernamesView
AS
SELECT *
FROM Usernames
WHERE Username = CURRENT_USER
GO

CREATE VIEW CustomersView
AS
SELECT 
	c.ID
	,c.CustomerType
FROM Customers AS c
	INNER JOIN	NormalUsers AS nu
		ON c.ID = nu.CustomerID
	INNER JOIN	Usernames As u
		ON u.ID = nu.ID
WHERE u.Username = CURRENT_USER
GO

CREATE VIEW CompaniesView
AS
SELECT
	comp.ID
	,comp.CustomerID
	,comp.IndividualID
	,comp.CIF
	,comp.Name
	,comp.Address
FROM Companies AS comp
	INNER JOIN CustomersView AS cw
		ON cw.ID = comp.CustomerID
GO

CREATE VIEW IndividualsView
AS
SELECT
	i.ID
	,i.FirstName
	,i.LastName
	,i.Email
	,i.CNP
	,i.Birthday
FROM Individuals	AS i
	INNER JOIN IndividualCustomers AS ic
		ON i.ID = ic.IndividualID
	INNER JOIN CustomersView as cw
		ON ic.CustomerID = cw.ID
UNION
SELECT
	i.ID
	,i.FirstName
	,i.LastName
	,i.Email
	,i.CNP
	,i.Birthday
FROM Individuals	AS i
	INNER JOIN CompaniesView AS cw
		ON i.ID = cw.IndividualID
GO

CREATE VIEW HistoryTransactionView
AS
SELECT
	ht.ID
	,ht.CustomerID
	,ht.UserAccountID
	,ht.TypeTransaction
	,ht.DateTransaction
FROM HistoryTransaction as ht
	INNER JOIN CustomersView as cw
		ON ht.CustomerID = cw.ID
GO

CREATE VIEW UserAccountsView
AS
SELECT
	ua.ID
	,ua.BankPacket
	,ua.AccountNumber
	,ua.ValabilityUntil
	,ua.Currency
	,ua.Sold
	,ua.AccountCustomerID
FROM UserAccounts AS ua
	INNER JOIN CustomersView AS cw
		ON ua.AccountCustomerID = cw.ID
GO

--- Stored Procedures ---------------------------------------------------------------------------------

-------almost done

CREATE PROCEDURE getIdCustomer
	@userID		int						-- poate evoula intr-o cheie	
	,@idClient	int OUTPUT
AS
BEGIN
	SET @idClient = (
		SELECT TOP 1
			Customers.ID
		FROM 
			Usernames
			INNER JOIN NormalUsers
				ON Usernames.ID = NormalUsers.ID
			INNER JOIN Customers
				ON Customers.ID = NormalUsers.CustomerID
		WHERE Usernames.ID = @userID
	)

	IF (@idClient is null)
	BEGIN
		SET @idClient = -1
	END
END
GO

CREATE PROCEDURE IsAdmin
	@UserID int
	,@Result	bit OUTPUT
AS
BEGIN
	DECLARE @UserType int = (
		SELECT TOP 1
			Usernames.UserType
		FROM Usernames
		WHERE Usernames.ID = @UserID
	)
	IF @UserType = 2
	BEGIN
		SET @Result = 1
	END
	ELSE
	BEGIN
		SET @Result = 0
	END

END


GO
drop procedure putMoneyOnAccount
CREATE PROCEDURE putMoneyOnAccount
	@IBAN nvarchar(100)
	,@idAdmin int
	,@valueMoney float
AS
BEGIN
	DECLARE @idCustomer int;
	DECLARE @isAdmin BIT;

	
	EXEC IsAdmin @userID =@idAdmin , @Result = @isAdmin OUTPUT

	IF @isAdmin = 1
	BEGIN
			BEGIN
				UPDATE UserAccounts
					SET UserAccounts.Sold=UserAccounts.Sold+@valueMoney
					WHERE UserAccounts.AccountNumber = @IBAN;
			END
	END
END

GO
CREATE PROCEDURE transferMoney
	@fromIBAN nvarchar(100)
	,@toIBAN nvarchar(100)
	,@fromIdUser int
AS
BEGIN



END



CREATE PROCEDURE getUandPProcedure  
    @Username nvarchar(50),   
    @Password nvarchar(50)  
AS   
BEGIN
    
	SELECT ID FROM Usernames
		WHERE @Username=Username and @Password=Pass
	
END
GO
drop procedure selectOnIndividuals
CREATE PROCEDURE selectOnIndividuals
	@id int 
AS
BEGIN
	SELECT * FROM Individuals
		INNER JOIN Employees
			ON Individuals.ID=Employees.IndividualID
		INNER JOIN BankAdmins
			ON BankAdmins.EmployeeID=Employees.ID
		INNER JOIN Usernames
			ON Usernames.ID=BankAdmins.ID
		WHERE Usernames.ID=@id

END
GO
EXEC selectOnIndividuals 5


CREATE PROCEDURE AddNormalUser(
	@IDcustomer		int
	,@Username		nvarchar(101)
	,@Password		nvarchar(100)
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION AddingNormalUser
	
			INSERT INTO Usernames(UserType, Username, Pass)
			VALUES(1, @Username, @Password)
			
			INSERT INTO NormalUsers(ID, CustomerID)
			VALUES (IDENT_CURRENT('Usernames'), @IDcustomer)

			COMMIT TRANSACTION AddingNormalUser
	END TRY
	
	BEGIN CATCH
		ROLLBACK TRANSACTION AddingNormalUser
		PRINT 'AddNormalUser error'
		SELECT 
        ERROR_NUMBER() AS ErrorNumber,
        ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
GO

CREATE PROCEDURE AddBankAdmin(
	@IDemployee		int
	,@Username		nvarchar(101)
	,@Password		nvarchar(100)
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION AddingBankAdmin
			INSERT INTO Usernames(UserType, Username,Pass)
			VALUES(2, @Username,@Password)
			
			INSERT INTO BankAdmins(ID, EmployeeID)
			VALUES (IDENT_CURRENT('Usernames'), @IDemployee)

		COMMIT TRANSACTION AddingBankAdmin
	END TRY
	
	BEGIN CATCH
		ROLLBACK TRANSACTION AddingBankAdmin
		PRINT 'AddBankAdmin error'
		SELECT 
        ERROR_NUMBER() AS ErrorNumber,
        ERROR_MESSAGE() AS ErrorMessage;
	END CATCH

END
GO


--- Roles --------------------------------------------------------------------------------------------
CREATE ROLE NormalUser

-- views
GRANT SELECT ON UsernamesView TO NormalUser
GRANT SELECT ON CustomersView TO NormalUser
GRANT SELECT ON CompaniesView TO NormalUser
GRANT SELECT ON IndividualsView TO NormalUser -- oricum nu poate sa updateze view facut cu UNION
GRANT CONTROL ON HistoryTransactionView TO NormalUser
GRANT CONTROL ON UserAccountsView TO NormalUser

-- tables
GRANT SELECT ON BankingPackets TO NormalUser
GRANT SELECT ON AccountTypes TO NormalUser
GRANT SELECT ON ComisionStatus TO NormalUser
GRANT SELECT ON TypesTransaction TO NormalUser
GO

CREATE ROLE BankAdmin
GRANT CONTROL ON Usernames TO BankAdmin
GRANT CONTROL ON Individuals TO BankAdmin
GRANT EXEC ON getUandPProcedure TO BankAdmin
GO

CREATE LOGIN MitBankApp WITH PASSWORD='pass'
GO

CREATE USER MitBankApp FOR LOGIN MitBankApp
GO

ALTER ROLE BankAdmin
ADD MEMBER MitBankApp
GO





-- Inserting values ------------------------------------------------------------------
INSERT INTO CustomerTypes (ID, CustomerTypeName)
VALUES (1, 'Individual'), (2, 'Company')

INSERT INTO UserTypes (ID, UserType)
VALUES (1, 'NormalUser'), (2, 'BankAdmin')

-- Individual Normal User Example
INSERT INTO Individuals (FirstName, LastName, Email, CNP, Birthday)
VALUES ('Sergiu', 'Scriban', 'sergiuscriban@mail.com', '1234567890123', '1996-05-31')
INSERT INTO Customers (CustomerType)
VALUES (1)
DECLARE @CurentIDCustomers int = IDENT_CURRENT('Customers') 
INSERT INTO IndividualCustomers (IndividualID, CustomerID)
VALUES (IDENT_CURRENT('Individuals'), @CurentIDCustomers)
EXEC AddNormalUser @IDCustomer = @CurentIDCustomers, @Username = 'sscriban', @Password = 'sscriban' 

-- Company Normal User Example 1
INSERT INTO Individuals (FirstName, LastName, Email, CNP, Birthday)
VALUES ('Adrian', 'Andriu', 'adrianandriu@mail.com', '1234567890127', '1996-05-31')
INSERT INTO Customers (CustomerType)
VALUES (2)
SET @CurentIDCustomers = IDENT_CURRENT('Customers')
INSERT INTO Companies(CustomerID, IndividualID, CIF, Name, Address)
VALUES (@CurentIDCustomers, IDENT_CURRENT('Individuals'), 12345, 'Personal Development SRL', 'Bucuresti, Romania')
EXEC AddNormalUser @IDCustomer = @CurentIDCustomers, @Username = 'personalDev', @Password = 'personalDev'

-- Company Normal User Example 1
INSERT INTO Individuals (FirstName, LastName, Email, CNP, Birthday)
VALUES ('Marius-Cristian', 'Andrei', 'mcandrei@mail.com', '1234567890126', '1996-05-31')
INSERT INTO Customers (CustomerType)
VALUES (2)
SET @CurentIDCustomers = IDENT_CURRENT('Customers')
INSERT INTO Companies(CustomerID, IndividualID, CIF, Name, Address) 
VALUES (@CurentIDCustomers, IDENT_CURRENT('Individuals'), 12346, 'Compania a 3-a SA', 'Bucuresti, Romania')
EXEC AddNormalUser @IDCustomer = @CurentIDCustomers, @Username = 'compania3', @Password = 'compania3' 

-- IndividualCustomer and reprezentative for company
INSERT INTO Customers (CustomerType)
VALUES (1)
SET @CurentIDCustomers = IDENT_CURRENT('Customers') 
INSERT INTO IndividualCustomers (IndividualID, CustomerID)
VALUES ((SELECT TOP 1 ID FROM Individuals WHERE CNP = '1234567890126'), @CurentIDCustomers)
EXEC AddNormalUser @IDCustomer = @CurentIDCustomers, @Username = 'mcandrei', @Password = 'mcandrei' 

-- Individual Bank Admin Example
INSERT INTO Individuals (FirstName, LastName, Email, CNP, Birthday)
VALUES ('George-Andrei', 'Dima', 'andreidima@mail.com', '1234567890124', '1996-05-31')
INSERT INTO Employees (IndividualID)
VALUES (IDENT_CURRENT('Individuals'))
DECLARE @CurentIDEmpl int = IDENT_CURRENT('Employees')
EXEC AddBankAdmin @IDemployee = @CurentIDEmpl, @Username = 'adima', @Password = 'adima'

-- Individual Bank Admin Example 2 - also employee
INSERT INTO Individuals (FirstName, LastName, Email, CNP, Birthday)
VALUES ('Stefan-Alexandru', 'Mudrag', 'samudrag@mail.com', '1234567890128', '1996-05-31')
INSERT INTO Employees (IndividualID)
VALUES (IDENT_CURRENT('Individuals'))
SET @CurentIDEmpl = IDENT_CURRENT('Employees')
EXEC AddBankAdmin @IDemployee = @CurentIDEmpl, @Username = 'samud', @Password = 'samud'

INSERT INTO Customers (CustomerType)
VALUES (1)
SET @CurentIDCustomers = IDENT_CURRENT('Customers') 
INSERT INTO IndividualCustomers (IndividualID, CustomerID)
VALUES (IDENT_CURRENT('Individuals'), @CurentIDCustomers)
EXEC AddNormalUser @IDCustomer = @CurentIDCustomers, @Username = 'samudrag', @Password = 'samudrag' 

--Insert informations abount account---
use MitBankDB
INSERT INTO AccountTypes(TypeOfAccount)
VALUES('credit')
INSERT INTO AccountTypes(TypeOfAccount)
VALUES('debit')
INSERT INTO AccountTypes(TypeOfAccount)
VALUES('deposit')

INSERT INTO TypeBankingPackets(NameTypePacket)
VALUES('STUDENT PE+');
INSERT INTO TypeBankingPackets(NameTypePacket)
VALUES('GOLD PE+');
INSERT INTO TypeBankingPackets(NameTypePacket)
VALUES('PLATINUM PE+');
INSERT INTO TypeBankingPackets(NameTypePacket)
VALUES('SPRINT +');
INSERT INTO TypeBankingPackets(NameTypePacket)
VALUES('SENIOR +');
INSERT INTO TypeBankingPackets(NameTypePacket)
VALUES('CLASSIC PE');

INSERT INTO BankingPackets(IDTypePacket,AccountType)
VALUES(1,2)
INSERT INTO BankingPackets(IDTypePacket,AccountType)
VALUES(2,3)

INSERT INTO TypesTransaction(TypeTransaction)
VALUES('deposit')
INSERT INTO TypesTransaction(TypeTransaction)
VALUES('pay bill')
INSERT INTO TypesTransaction(TypeTransaction)
VALUES('withdraw')

INSERT INTO ComisionStatus(IDTypeTransaction,IDBankPacket,Comision)
VALUES(1,1,5.3)
INSERT INTO ComisionStatus(IDTypeTransaction,IDBankPacket,Comision)
VALUES(2,1,1.2)


INSERT INTO UserAccounts(BankPacket,AccountNumber,ValabilityUntil,Currency,Sold,AccountCustomerId)
VALUES (1,'RO93MITB0410120579132411','2019-1-1','RON',554.15,1)

INSERT INTO CurrentCurrency(CurrencyName,ValueBuy,ValueSel)
VALUES('EUR',4.6464,4.6133)

INSERT INTO CurrentCurrency(CurrencyName,ValueBuy,ValueSel)
VALUES('USD',3.87,4.83)

INSERT INTO CurrentCurrency(CurrencyName,ValueBuy,ValueSel)
VALUES('GBH',5.245,5.16)
SELECT * FROM Usernames

EXEC getUandPProcedure 'adima','adima'

SELECT * FROM CurrentCurrency

EXEC putMoneyOnAccount 'RO93MITB0410120579132411' , 1 , 100    

select * from UserAccounts 

